Supybook
========
Heikki Hokkanen <hoxu@users.sf.net>
{date}

== Preface ==

=== Conventions used in this document ===

`command <name> [value]`::
	A command that takes `name` as a required parameter and `value` as an optional parameter.

`command <nick...>`::
	A command that takes one or more parameters.

[green]#Plugin#::
	A plugin name

=== How to give feedback ===

If you spot an error, have suggestions or just want to tell me how much you love/hate the document, send e-mail to mailto:hoxu@users.sf.net[]. Prefix the Subject with `[supybook]`.

=== This document is Free ===

This document is Free (TM) as defined by the http://www.fsf.org/[Free Software Foundation], more specifically, this document is available under the terms of http://www.gnu.org/licenses/gpl-3.0.txt[GNU General Public License version 3 (GPLv3)].

== Getting started ==

=== Identifying to the bot ===

After running supybot-wizard and starting the bot, connect to the same IRC network it is on, and /query it. You can identify with the `identify <name> <password>` command. You can check the bot's idea of who you are with the `whoami` command.

=== Accessing the online help ===

Most commands on the bot have a short online help available. You can use `list` to list loaded plugins, and `list <plugin>` to list commands in those plugins. `help [plugin] <command>` can be used to access the command help. Use `more` to read long messages from the bot.

Help for configuration items can be accessed with the `config help <key>` command.

== Understanding supybot's peculiarities ==

Supybot has a couple of features that sets it apart from more traditional bots. More specifically, nested commands, plugin framework (even the basic functionality is implemented using plugins), and capabilities. This section covers some basic information about Supybot. Feel free to skip it, but come back later if you run into something you don't understand.

=== Nested commands ===

Supybot allows nested commands, in other words, you can pass the result of a command to another command as a parameter. What does this allow then, though, apart from the obvious bragging rights? For example, if you want to restore a configuration entry to the default value, you can type:

`config reply.withNickPrefix [config default reply.withNickPrefix]`

Obviously, that wasn't very neat. They could've included a `config reset <key>` command instead, for example. But I'm sure you can figure out *something* useful to do with this.

=== Plugins ===

Pretty much everything in Supybot is a plugin. Most commands you use belong to a plugin. If two plugins provide the same command, then you need to prefix the command with the plugin name. For example, the `ignore list` command yields the following output:

.output
----
Error: The command "ignore list" is available in the Admin and Channel plugins.
Please specify the plugin whose command you wish to call by using its name as a command before "ignore list".
----

Thus, you need to either use `admin ignore list` or `channel ignore list` command. That is, unless you define which plugin is the default one using the `defaultplugin [\--remove] <command> [plugin]` command provided in the [green]#Owner# plugin.

The `list` command ([green]#Plugin#) can be used to list loaded plugins. You can prevent some plugins from showing in the list with the command:

`config plugins.<plugin>.public False`

`list`::
	List currently loaded plugins, excluding the ones set non-public.

`list \--private`::
	List loaded plugins that are set to non-public.

`list <plugin>`::
	List commands provided by the given plugin.

`load [\--deprecated] <plugin>`::
	Load a plugin. Supybot looks for plugins in directories listed in `config conf.supybot.directories.plugins`.

`unload <plugin>`::
	Unloads a plugin. The [green]#Owner# plugin cannot be unloaded.

== Administrative tasks ==

=== Networks ===

Related plugins: [green]#Network, Services#.

==== Adding a network ====

`network connect <network> [<host[:port]>]` ?

==== Reconnecting ====

`reconnect [network] [quit message]`.

==== Disconnecting ====

`network disconnect [network] [message]`

==== Listing networks ====

`networks`

.output
----
freenode: wolfe.freenode.net and ircnet: irc.elisa.fi
----

==== Adding more servers ====

Once you've added a network with the initial server, you can add more servers:

`config networks.<network>.servers [config networks.<network>.servers] server:6667`

==== Listing network servers ====

`config networks.<network>.servers`

.output
----
chat.freenode.net:6667
----

==== Services: NickServ ====

You can make Supybot identify itself to the network NickServ after it has connected.

`config plugins.Services.noJoinsUntilIdentified True`::
	Settings this is useful on Freenode and other networks who change the user mask after identifying to NickServ.

`config plugins.Services.NickServ NickServ`::
	Tell the bot what name NickServ can be found under.

`services password <nick> [password]`::
	Can be used to set or remove NickServ password.
	
`services identify`::
	Identifies the bot to NickServ with the current nick. You don't need to give this command after the bot has been set up; it will identify when connecting to the network automatically.

==== Services: ChanServ ====

You can make Supybot request op after joining a channel on a network with ChanServ.

`config plugins.Services.ChanServ ChanServ`::
	Tell the bot what name ChanServ can be found under.

`config plugins.Services.ChanServ.op <on|off>`::
	Set the default for all channels. This will be used unless a channel-specific config overrides it.

`config channel [channel] plugins.services.ChanServ.op <on|off>`::
	Set to request op on the given `channel`.

Voice and half-op (on networks supporting it) can be used similarly.

==== Deleting a network ====

TODO

=== Channels ===

Related plugins: [green]#Channel#.

NOTE: Commands in this section (such as adding/removing channels) work in the current network, eg. the one you are messaging the bot in. The commands also accept a `[channel]` parameter which is needed only when the command is written in private.

NOTE: If you want to /msg the bot in one network, while having the command apply in another network, you can use the `network command <network> <command> [params]` command. The reply comes in the other network though (TODO: confirm).

==== Adding a new channel ====

A new channel is added by messaging the bot in the same network with `join <channel> [key]` command.

==== Listing channels ====

`channels`

NOTE: This only works in private, to prevent knowledge of top secret channels from falling to wrong hands.

You can list channels in another network with `config networks.<network>.channels`.

==== Removing a channel ====

`part [channel] [reason]`

==== Modifying channel config ====

`config channel [channel] <name> <value>`

==== Setting the key ====

`channel key [channel] [key]` can be used to set or clear the channel key.

==== Setting the limit ====

`channel limit [channel] [limit]` sets or clears the channel limit.

==== Channel commands ====

Channel ops can use the following commands to control the channel via the bot, assuming it is opped.

`op [channel] [nick...]`::
	Ops the given nicks (or you if none) on the channel.

`deop [channel] [nick...]`::
	Ditto, but deops.

`voice [channel] [nick...]`::
	Voices the given nicks (or you if none) on the channel.

`devoice [channel] [nick...]`::
	Ditto, but devoices.

`kban [channel] [\--{exact,nick,user,host}] <nick> [seconds] [reason]`::
	Bans and kicks the given nick from the channel. If `seconds` is specified and is not 0, the ban will expire after that time.

`mode [channel] <mode> [params]`::
	Set channel mode. This can be used to change any channel modes, making the commands below redundant aliases.

`moderate [channel]`::
	Set +m. This is not enforced by the bot, so any channel op can remove it.

`unmoderate [channel]`::
	Set -m.

`topic lock [channel]`::
	Set +t. Not enforced, so any channel op can remove it.

`topic unlock [channel]`::
	Set -t.

`alert [channel] <text>`::
	Sends `text` to all users on the channel with op capability.

`cycle [channel]`::
	Make the bot part and join the channel. Mostly useful to test whether auto-ops from other bots/users work for the bot.

==== Maintaining the ban list ====

`ban add [channel] <nick|hostmask> [expires]`::
	Add ban for given nick or hostmask on the channel. If nick is given, the full hostmask is banned. `expires` when gives, expires the ban after so many seconds.

`ban list [channel]`::
	List bans with their expire times.

`ban remove [channel] <hostmask>`::
	Removes the ban on given `hostmask`.

NOTE: Users matching the ban list are not automatically kicked off the channel. See the `kban` command in the previous section to kick and ban a user.

==== Maintaining the ignore list ====

`channel ignore add [channel] <nick|hostmask> [expires]`

`channel ignore list [channel]`

`channel ignore remove [channel] <hostmask>`

NOTE: There is also a global ignore list.

==== Enforcing channel modes ====

TODO: Is there a plugin for this?

==== Listing channel nicks ====

`channel nicks [channel]`

==== Topic operations ====

Related plugins: [green]#Topic#.

Supybot allows elaborate manipulation of the channel topic.

http://supybot.com/documentation/plugins/topic

==== Logging ====

Logging of channels is provided by the [green]#ChannelLogger# plugin. Various channel-specific configuration items are provided, see `config list plugins.ChannelLogger`.

By default logs will go into logs/ChannelLogger/<network>/<channel>/<channel>.log and will be rotated when the default "%d-%a-%Y" (eg. 06-Sat-2008) timestamp rotates. See http://docs.python.org/lib/module-time.html[the python documentation for strftime] for the formatting characters.

===== Searching the log =====

The logs of [green]#ChannelLogger# cannot be searched online. However, other plugins provide some searching functionality.

`url last [channel] [\--{from,with,without,near,proto} value] [\--nolimit]`::
	Find last URL (or all with `\--nolimit`) matching given criteria. From matches nick, with(out) part of the URL, near rest of the line where the URL was, and proto matches the protocol (https, ftp, etc). In case of multiple URLs, the newest is listed first. Multiple criterias can be given.

	NOTE: This command lists only the URLs, not nick or what message the URLs were part of. No date is shown either.

`last [\--from,in,on,with,without,regexp} value] [\--nolimit]`::
	Find messages matching given criteria. From matches nick, in matches channel, on matches network, with(out) matches part of the message, regexp matches messages that are included by the regular expression. Also see `config protocols.irc.maxHistoryLength`.

==== Auto-ops & voices ====

Auto-opping is provided by the [green]#AutoMode# plugin.

==== Seen ====

The [green]#Seen# plugin keeps track of last channel/nick/user activity. Most typical use is asking the bot when a given user was last seen chatting on a channel.

`seen any [channel] [\--user <user>] [nick]`::
	Lists any activity given `nick` or `user` was doing on the channel. If no `nick` or `user` is given, returns the last activity on the channel, regardless of who it was from.

`seen last [channel]`:
	Last line said on the channel.

`seen [channel] <nick>`::
	Last time a `nick` was seen on a channel and what it said.

`seen user [channel] <user>`:
	Ditto, except use a user name, disregarding what nick the said user had.

=== Users ===

Related plugins: [green]#Users#.

Supybot users are global: they are visible across networks. This means the same username/password and hostmasks will work in all networks the bot is on.

Users are recognized either by matching hostmasks, or after manually identifying to the bot. In secure mode, the user must both match a hostmask and identify to the bot (`uset set secure [password] <True|False>`).

NOTE: If users knowing each others' nicks is an issue, they could come up with different aliases when registering to the bot. The bot username does not have to match the nick of the user.

==== Adding a new user ====

`user register <name> <password>`

==== Manipulating hostmasks ====

`user hostmask add` - add your current hostmask. Obviously this makes only sense after identify.

`user hostmask add [name] [hostmask] [password]` - add hostmask for another user. If not owner, password must be given.

`user hostmask remove <name> <hostmask> [password]`

NOTE: There is no way to add network-specific hostmasks (TODO: confirm).

==== Listing users ====

`user list [glob]` - list registered users. Note that the list of users is global across networks.

==== Deleting users ====

`user unregister <name> [password]`

==== Changing password ====

`user set password <user> <old password> <new password>`.

==== Renaming a user ====

`user changename <name> <new name> [password]`

Users can change their name themselves.

==== Manipulating user capabilities ====

TODO

=== General bot maintenance ===

Related plugins: [green]#Admin, Config#.

==== Setting nickname & alternative nick ====

`admin nick <newnick>`

`config nick`

`config nick.alternates` - space-separated list of alternate nicks, %s refers to nick.

TODO: different nick in different networks?

==== Setting ident ====

`config ident <newident>`

==== Setting command prefix / controlling when the bot replies ====

TODO: config search nick & config search prefix contain related stuff.

==== Listing and searching settings ====

`config search <word>` - list config items containing word.

`config <name>` - show config value for name.

`config <name> <value>` - set config value for name.

=== Owner commands ===

`owner announce <text>` - send `text` to all channels the bot is on.

`owner ircquote <raw>` - send `raw` as-is to the server. You need to know your way around http://www.faqs.org/rfcs/rfc1459.html[RFC1459] pretty well to use this.

== Caveats ==

This is a list of issues I have not yet figured out how to do, or there simply isn't a way.

- No way to change the default ircname/realname of the bot from "Supybot <version>"
- How to enforce channel modes (eg. force +ns-t for example)
- How to delete config items
- How to delete channels / networks
- Ban add does not seem to work on Freenode
- No global ban list
- Capabilities are not network/channel -specific, but channel-specific. If channel by same name exists in two networks, the users have same capabilities on both


